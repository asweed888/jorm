{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAEA,aAAA,IAAc,EAAd,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,SAAc,GACV,IAAA,EAAA,WAEI,SAAA,EAAY,GADJ,KAAA,GAAU,GAET,KAAA,GAAK,EAoElB,OAjEW,EAAA,UAAA,SAAP,SAAgB,EAAqB,GAC7B,IACK,KAAA,GAAG,GAAe,EACzB,MAAO,GACL,QAAQ,MAAM,EAAM,SAEjB,OAAA,KAAK,KAAK,IAGd,EAAA,UAAA,OAAP,SAAc,EAAqB,GAC3B,IACK,KAAA,GAAG,GAAa,KAAK,GAC5B,MAAO,GACL,QAAQ,MAAM,EAAM,SAGjB,OAAA,KAAK,KAAK,IAGd,EAAA,UAAA,OAAP,SAAc,EAAqB,GACzB,IAAA,EAAK,EAAa,GACpB,EAAS,SACN,EAAO,GAEV,IACK,IAAA,IAAM,KAAO,KAAK,GAAG,GAClB,GAAA,KAAK,GAAG,GAAa,GAAK,IAAM,EAC/B,IAAA,IAAM,KAAQ,EACV,KAAA,GAAG,GAAa,GAAK,GAAQ,EAAO,GAGnD,MAAO,GACL,QAAQ,MAAM,EAAM,SAIjB,OAAA,KAAK,KAAK,IAGd,EAAA,UAAA,OAAP,SAAc,EAAqB,GACzB,IAAA,EAAK,EAAa,GACpB,IACK,IAAA,IAAM,KAAO,KAAK,GAAG,GAClB,KAAK,GAAG,GAAa,GAAK,IAAM,GAC/B,KAAA,GAAG,GAAa,OAAO,EAAK,GAEvC,MAAO,GACL,QAAQ,MAAM,EAAM,SAGjB,OAAA,KAAK,KAAK,IAId,EAAA,UAAA,KAAP,SAAY,GACJ,IAAA,EACA,IACA,EAAU,KAAK,GAAG,GACpB,MAAO,GACL,QAAQ,MAAM,EAAM,SAGjB,OAAA,GAGf,EAvEA,GAAa,EAAA,KAAI,EADrB,CAAc,EAAA,QAAA,OAAA,QAAA,KAAI","file":"index.js","sourceRoot":"../src","sourcesContent":["import { Record, Records } from './type'\n\nexport module jorm {\n    export class Open {\n        private db: any = {}\n        constructor(dbinit) {\n            this.db = dbinit\n        }\n\n        public Register(recordsName: string, records: any): Records{\n            try {\n                this.db[recordsName] = records\n            } catch (error) {\n                console.error(error.message)\n            }\n            return this.Find(recordsName)\n        }\n\n        public Create(recordsName: string, newRecord: Record): Records {\n            try {\n                this.db[recordsName].push(newRecord)\n            } catch (error) {\n                console.error(error.message)\n            }\n\n            return this.Find(recordsName)\n        }\n\n        public Update(recordsName: string, targetRecord: Record): Records {\n            const id = targetRecord.id\n            let record = targetRecord\n            delete record.id\n\n            try {\n                for (const idb in this.db[recordsName]) {\n                    if (this.db[recordsName][idb].id != id) continue\n                    for (const krec in record) {\n                        this.db[recordsName][idb][krec] = record[krec]\n                    }\n                }\n            } catch (error) {\n                console.error(error.message)\n            }\n\n            \n            return this.Find(recordsName)\n        }\n\n        public Delete(recordsName: string, targetRecord: Record): Records{\n            const id = targetRecord.id\n            try {\n                for (const idb in this.db[recordsName]) {\n                    if (this.db[recordsName][idb].id != id) continue\n                    this.db[recordsName].splice(idb, 1)\n                }\n            } catch (error) {\n                console.error(error.message)\n            }\n\n            return this.Find(recordsName)\n        }\n\n\n        public Find(recordsName: string): Records {\n            let records: Records\n            try {\n                records = this.db[recordsName]\n            } catch (error) {\n                console.error(error.message)\n            }\n\n            return records\n        }\n\n    }\n}\n"]}